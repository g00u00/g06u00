 https://ru.wikipedia.org/wiki/%D0%91%D0%B8%D1%82

Бит (англ. binary digit — двоичное число; также игра слов: англ. bit — кусочек, частица) — единица измерения количества информации, равная одному разряду в двоичной системе счисления.

В Российской Федерации обозначения бита, а также правила его применения и написания установлены Положением о единицах величин, допускаемых к применению. В соответствии с данным положением бит относится к числу внесистемных единиц величин с областью применения «информационные технологии, связь» и неограниченным сроком действия[1]. Ранее обозначения бита устанавливались также в ГОСТ 8.417-2002[2]. Для образования кратных единиц применяется с приставками СИ и с двоичными приставками.

Клод Шеннон в 1948 году впервые использовал слово «bit» для обозначения наименьшей единицы информации в статье «математическая теория связи». Происхождение этого слова он приписывал Джону Тьюки, использовавшему сокращение «bit» вместо слов «binary digit» в заметке лаборатории Белла от 9 января 1947 года.

по Шеннону[4]:
бит — это двоичный логарифм вероятности равновероятных событий или сумма произведений вероятности на двоичный логарифм вероятности при равновероятных событиях; см. информационная энтропия;
бит — базовая единица измерения количества информации, равная количеству информации, содержащемуся в опыте, имеющем два равновероятных исхода; см. информационная энтропия. Это тождественно количеству информации в ответе на вопрос, допускающий ответ «да» или «нет» и никакого другого (то есть такое количество информации, которое позволяет однозначно ответить на поставленный вопрос);

один разряд двоичного кода (двоичная цифра) может принимать только два взаимоисключающих значения: «да» или «нет», «1» или «0», «включено» или «выключено», и т. п. В электронике одному двоичному разряду соответствует один двоичный триггер (триггер, имеющий два устойчивых состояния).

В вычислительной технике и сетях передачи данных значения «0» и «1», обычно, передаются различными уровнями либо напряжения, либо тока. Например, в микросхемах на основе транзисторно-транзисторной логики значение «0» представляется напряжением в диапазоне от +0 до +0.8 В, а значение «1» — напряжением в диапазоне от +2.4 до +5.0 В.

------------------------------

Двоичная система счисления
https://ru.wikipedia.org/wiki/%D0%94%D0%B2%D0%BE%D0%B8%D1%87%D0%BD%D0%B0%D1%8F_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%81%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F


 Двоичная система счисления — позиционная система счисления с основанием 2. Благодаря непосредственной реализации в цифровых электронных схемах на логических вентилях, двоичная система используется практически во всех современных компьютерах и прочих вычислительных электронных устройствах.
 
 Преобразование двоичных чисел в десятичные[править | править вики-текст]
Допустим, дано двоичное число . Для перевода в десятичное запишите его как сумму по разрядам следующим образом:

00110001
  1 * 2^5 =32   
+ 1 * 2^4 =16
+ 0 * 2^3 = 0
+ 0 * 2^2 = 0
+ 0 * 2^1 = 0
+ 1 * 2^0 = 1
= 49      =49

49/2 = 24 ост 1
24/2 = 12 ост 0
12/2 = 6  ост 0
6/2 =3    ост 0
3/2 =1    ост 1
1/2 =0    ост 1
0/2 =0    ост 0


0b00110001
print 0b00110001
print bin(0b00110001)
print int(0b00110001)
print hex(0b00110001)
print chr(0b00110001)
print ord('1')
print ord('a')
print (ord('a')+2)
print chr(ord('a')+2)


print unichr(0b00110001)
print  ord(u'1')
print  bin(ord(u'1'))

print ord(u'б')
print unichr(1073)
print int(ord(u'б'))
print oct(ord(u'б'))
print hex(ord(u'б'))
print bin(ord(u'б'))
print unichr(int(ord(u'б'))+2)

for i in xrange(2000): print "| ", i,  unichr(i),


https://docs.python.org/2/howto/unicode.html - мньго полезных примеров



-----------------------------
Дополнительный код (представление числа)  
https://ru.wikipedia.org/wiki/%D0%94%D0%BE%D0%BF%D0%BE%D0%BB%D0%BD%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9_%D0%BA%D0%BE%D0%B4_(%D0%BF%D1%80%D0%B5%D0%B4%D1%81%D1%82%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D1%87%D0%B8%D1%81%D0%BB%D0%B0)  

Дополнительный код (англ. two’s complement, иногда twos-complement) — наиболее распространённый способ представления отрицательных целых чисел в компьютерах. Он позволяет заменить операцию вычитания на операцию сложения и сделать операции сложения и вычитания одинаковыми для знаковых и беззнаковых чисел, чем упрощает архитектуру ЭВМ.

Дополнительный код отрицательного числа можно получить инвертированием модуля двоичного числа (первое дополнение) и прибавлением к инверсии единицы (второе дополнение), либо вычитанием числа из нуля.

Дополнительный код (дополнение до 2) двоичного числа получается добавлением 1 к младшему значащему разряду его дополнения до 1.

Представление отрицательного числа в дополнительном коде
-------------------------------------------------------
Преобразование числа из прямого кода в дополнительный осуществляется по следующему алгоритму.
Если число, записанное в прямом коде, положительное, то к нему дописывается старший (знаковый) разряд, равный 0, и на этом преобразование заканчивается;

Если число, записанное в прямом коде, отрицательное, то все разряды числа инвертируются, а к результату прибавляется 1. К получившемуся числу дописывается старший (знаковый) разряд, равный 1.

Задание
--------
Выполнить преобразования, правильность преобразований доказать использованием современного ПО
 101  = 5 
print int(0b101)



============================================
Битовые операторы в Python
Python has and, or, and not logical operators, and it has & (and), | (or), ~ (not), and ^ (xor) bitwise operators, but no logical xor

    

True ^ True

http://rtfm.co.ua/python_s_nulya/python-s-nulya-chast-3-bazovye-operatory/
Битовые (или «побитовые«) операторы работают с битами данных, и выполняют операции бит-за-битом. — 

&	Binary AND Operator copies a bit to the result if it exists in both operands.
    
    True & True
    True & False
    False & False

    
|	Binary OR Operator copies a bit if it exists in eather operand
    True | True
    True | False
    False | False
    
    
^	Binary XOR Operator copies the bit if it is set in one operand but not both

    True ^ True
    True ^ False
    False ^  False

    -----------------
    True & False | False
    
    
    
~	Binary Ones Complement Operator is unary and has the efect of ‘flipping’ bits.
    ~ 0b1
    ~ True
    
a = 60 и b = 13. 

В бинарном формате:

a = 0b00111100
b = 0b00001101
-----------------
a&b = 00001100
a|b = 00111101
a^b = 00110001
~a  = 11000011

(a & b) will give 12 which is 0000 1100
(a | b) will give 61 which is 0011 1101
(a ^ b) will give 49 which is 0011 0001
(~a ) will give -61 which is 1100 0011 in 2’s complement form due to a signed binary number.

<<	Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.	a << 2 will give 240 which is 1111 0000
>>	Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.	a >> 2 will give 15 which is 0000 1111


#!/usr/bin/python

a = 60            # 60 = 0011 1100 
b = 13            # 13 = 0000 1101 

c = a & b;        # 12 = 0000 1100
print "Line 1 - Value of c is ", c

c = a | b;        # 61 = 0011 1101 
print "Line 2 - Value of c is ", c

c = a ^ b;        # 49 = 0011 0001
print "Line 3 - Value of c is ", c

c = ~a;           # -61 = 1100 0011
print "Line 4 - Value of c is ", c

c = a << 2;       # 240 = 1111 0000
print "Line 5 - Value of c is ", c

c = a >> 2;       # 15 = 0000 1111
print "Line 6 - Value of c is ", c

https://docs.python.org/2/library/stdtypes.html#boolean-operations-and-or-not
http://stackoverflow.com/questions/432842/how-do-you-get-the-logical-xor-of-two-variables-in-python
----------------------------------------

